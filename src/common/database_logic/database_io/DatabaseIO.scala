package common.database_logic.database_io

import java.time._

/**
 * DatabaseIO
 * Class for abstracting the database interface.
 *
 * Note: No statement commits automatically.
 */
object DatabaseIO {
  val db_instance: DatabaseIO_Interface = new DatabaseIO_MySQL() // Attempts to connect to the database

  /**
   * ValType()
   * A type that can either be a long, string, or time. Is used as varargs parameter of the database IO.
   */
  class ValType(val l: Option[Long],
                val s: Option[String],
                val t: Option[LocalTime]) {

    // Implicit conversions
    implicit def longToVal(l: Long) = new ValType(Some(l), None, None)
    implicit def stringToVal(s: String) = new ValType(None, Some(s), None)
    implicit def timeToVal(t: LocalTime) = new ValType(None, None, Some(t))
  }

  /**
   * execute()
   * Executes the SQL statement for the client database.
   *
   * @param stmt The SQL statement to execute.
   * @param values The values to input into the prepared statement generated by the query.
   * @return Boolean, True if the statement yields results. False otherwise (including row count).
   */
  def execute(stmt: String, values: Seq[ValType]): Boolean = db_instance.execute(stmt, values)

  /**
   * executeUpdate()
   * Executes the SQL update statement for the client database.
   *
   * @param update The SQL update statement to execute.
   * @param values The values to input into the prepared statement generated by the query.
   * @return Int, the number of rows updated.
   */
  def executeUpdate(update: String, values: Seq[ValType]): Int = db_instance.executeUpdate(update, values)

  /**
   * executeQuery()
   * Executes the SQL query for the client database.
   *
   * @param query The SQL query to execute.
   * @param values The values to input into the prepared statement generated by the query.
   * @return Iterator of the query results.
   */
  def executeQuery[T](query: String, values: Seq[ValType]): Iterator[T] = db_instance.executeQuery(query, values)

  /**
   * commit()
   * Commits the changes done as part of a query for the client database.
   */
  def commit() = db_instance.commit()

  /**
   * rollback()
   * Rolls-back any changes made until the previous commit.
   */
  def rollback() = db_instance.rollback()

  /**
   * closeConnection()
   * Closes the connection to the client database.
   */
  def closeConnection() = db_instance.closeConnection()
}
